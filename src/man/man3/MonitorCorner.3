.TH MonitorCorner 3 "29 May 2002" "HulkRobot" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MonitorCorner \- 
.SH SYNOPSIS
.br
.PP
\fC#include <MonitorCorner.h>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBMonitorCorner\fR (int priority, int samplingPeriod, int stackSize, \fBgyro\fR *aG, \fBusonic\fR *aU, \fBwheel\fR *aW)"
.br
.ti -1c
.RI "\fB~MonitorCorner\fR ()"
.br
.ti -1c
.RI "int \fBinit\fR (void)"
.br
.ti -1c
.RI "int \fBstep\fR (void)"
.br
.ti -1c
.RI "int \fBrun\fR (void)"
.br
.ti -1c
.RI "int \fBstop\fR (void)"
.br
.ti -1c
.RI "int \fBisCorner\fR (void)"
.br
.in -1c
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS MonitorCorner::MonitorCorner (int _priority, int _samplingPeriod, int stackSize, \fBgyro\fR * aG, \fBusonic\fR * aU, \fBwheel\fR * aW)
.PP
Definition at line 19 of file MonitorCorner.cc.
.PP
.nf
00021 {
00022 
00023   Error( ErrorDebug, "MonitorDooCorner initializing");
00024   priority        = _priority;
00025   samplingPeriod= _samplingPeriod;
00026   delayTicks      = samplingPeriod/OSTickPeriod;
00027 
00028   taskMode        = TaskStopped;
00029   taskSem = semBCreate(SEM_Q_PRIORITY, SEM_EMPTY);
00030   tickerSem       = semBCreate(SEM_Q_PRIORITY, SEM_EMPTY);
00031   taskExitSem     = semBCreate(SEM_Q_PRIORITY, SEM_EMPTY);
00032   tickerExitSem   = semBCreate(SEM_Q_PRIORITY, SEM_EMPTY);
00033 
00034   aGyro = aG;
00035   aUSonic = aU;
00036   aWheel = aW;
00037 
00038   Assert( taskSem && taskExitSem && tickerSem && tickerExitSem );
00039 
00040   taskId  = taskSpawn("MonitorCorner", priority, VX_FP_TASK, 
00041                           stackSize, (FUNCPTR) taskModuleStub,
00042                           (int) this, 0, 0, 0, 0, 0, 0, 0, 0, 0);
00043   Assert(taskId!=ERROR);
00044 
00045   semTake(taskExitSem, WAIT_FOREVER);
00046   
00047   tickerTaskId    = taskSpawn("MonitorCorner", TickerTaskPriority, 0, 
00048                           TickerTaskStackSize,
00049                           (FUNCPTR) taskModuleTickerStub,
00050                           (int) this,
00051                           0, 0, 0, 0,
00052                           0, 0, 0, 0, 0);
00053   Assert(tickerTaskId!=ERROR);
00054   semTake(tickerExitSem, WAIT_FOREVER);
00055 
00056   corner = 0; // set initial monitor signal ,false
00057 
.fi
.SS MonitorCorner::~MonitorCorner ()
.PP
Definition at line 59 of file MonitorCorner.cc.
.PP
.nf
00060 {
00061   taskMode=TaskTerminate;
00062   semGive(tickerSem);
00063   semGive(taskSem);
00064   semTake(tickerExitSem, WAIT_FOREVER);
00065   semTake(taskExitSem, WAIT_FOREVER);
00066   semDelete(taskSem);
00067   semDelete(taskExitSem);
00068   semDelete(tickerSem);
00069   semDelete(tickerExitSem);
00070 
00071   Error( ErrorDebug, "MonitorCorner destroyed");
00072 
.fi
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS int MonitorCorner::init (void)
.PP
Definition at line 173 of file MonitorCorner.cc.
.PP
Referenced by hulkmaincpp().
.PP
.nf
00174 {
00175   corner = 0;     // set initially Corner = false
00176 
.fi
.SS int MonitorCorner::isCorner (void)
.PP
Definition at line 167 of file MonitorCorner.cc.
.PP
Referenced by hulkmaincpp().
.PP
.nf
00168 {
00169   return corner;
00170 
.fi
.SS int MonitorCorner::run (void)
.PP
Definition at line 185 of file MonitorCorner.cc.
.PP
Referenced by hulkmaincpp().
.PP
.nf
00186 {
00187   taskMode=TaskRunning;
00188   semGive(tickerSem);
00189   return 0;
00190 
.fi
.SS int MonitorCorner::step (void)
.PP
Definition at line 178 of file MonitorCorner.cc.
.PP
.nf
00179 {
00180   taskMode=TaskStep;
00181   semGive(taskSem);
00182   return 0;
00183 
.fi
.SS int MonitorCorner::stop (void)
.PP
Definition at line 192 of file MonitorCorner.cc.
.PP
.nf
00193 {
00194   taskMode=TaskStopped;
00195   return 0;
00196 
.fi


.SH AUTHOR
.PP 
Generated automatically by Doxygen for HulkRobot from the source code.